/**
 * 插件
 */
let $plugins = function(){
    return {
        caches: {'pages': {}, 'codes': {}, 'data': {}}, // 缓存
        /**
         * 通知框(bootstrap-notify.min.js)
         * @param title
         * @param message
         * @param type: success/info/warning/danger
         */
        notify: function(title, message, type){
            let icons = {'info': 'info-sign', 'warning': 'warning-sign', 'success': 'ok', 'danger': 'remove'};
            // type = type || 'info';
            if(!icons[type]){
                type = 'info';
            }
            $.notify({
                icon: 'glyphicon glyphicon-' + icons[type],
                title: $utils.get_str(title),
                message: $utils.get_str(message),
                url: '',
                target: '_blank'
            }, {
                element: 'body',
                position: null,
                type: type,
                allow_dismiss: true,
                newest_on_top: false,
                showProgressbar: false,
                placement: {
                    from: "top",
                    align: "right"
                },
                offset: {x: 10, y: 50},
                spacing: 10,
                z_index: 9999,
                delay: 5000,
                timer: 1000,
                url_target: '_blank',
                mouse_over: null,
                animate: {
                    enter: 'animated fadeInDown',
                    exit: 'animated fadeOutUp'
                },
                onShow: null,
                onShown: null,
                onClose: null,
                onClosed: null,
                icon_type: 'class'
            });
        },
        /**
         * ajax请求
         * @param type
         * @param url
         * @param params
         * @param callback
         * @param error_callback
         */
        ajax: function(type, url, params, callback, error_callback){
            $.ajax({
                //请求方式
                type : type,
                // contentType: "application/json;charset=UTF-8",
                // contentType: "application/x-www-form-urlencoded;charset=UTF-8",
                //请求地址
                url : url,
                //数据，json字符串
                data : params,
                //请求成功
                success : function(result) {
                    if(typeof result === "object" && $utils.get_str(result.code) === '401'){
                        bootbox.dialog({
                            message: $utils.get_str(result.message) || '请重新登录!',
                            buttons: {
                                success : {
                                    label : '确定',
                                    className : "btn-sm btn-danger",
                                    callback: function(){window.location.reload();}
                                }
                            }
                        });
                    } else{
                        callback(result);
                    }
                },
                //请求失败，包含具体的错误信息
                error : function(e){
                    if($utils.get_str(e.status) === '401'){
                        bootbox.dialog({
                            message: '请重新登录!',
                            buttons: {
                                success : {
                                    label : '确定',
                                    className : "btn-sm btn-danger",
                                    callback: function(){window.location.reload();}
                                }
                            }
                        });
                    } else {
                        if(error_callback){
                            error_callback(e);
                        } else {
                            $plugins.notify('[%s]'.format(e.status), e.statusText, 'danger');
                        }
                    }
                }
            });
        },
        /**
         * ajax请求 - GET
         * @param url
         * @param params
         * @param callback
         * @param error_callback
         */
        ajax_get: function(url, params, callback, error_callback){
            this.ajax('GET', url, params, callback, error_callback);
        },
        /**
         * ajax请求 - POST
         * @param url
         * @param params
         * @param callback
         * @param error_callback
         */
        ajax_post: function(url, params, callback, error_callback){
            this.ajax('POST', url, params, callback, error_callback);
        },
        /**
         * ajax请求 - 加载页面
         * @param url
         * @param page
         * @param callback
         */
        ajax_page: function(url, page, callback){
            let cache = null;
            if(page in this.caches['pages']){
                cache = this.caches['pages'][page];
            }
            if(cache !== null && cache['expired'] >= $utils.time_str_to_milliseconds()){
                callback(cache['data']);
            } else {
                this.ajax_get(url, {page: page}, function(result){
                    $plugins.caches['pages'][page] = {'data': result, 'expired': $utils.time_str_to_milliseconds() + 60 * 60 * 1000};
                    callback(result);
                }, function(e){
                    callback(e.responseText);
                });
            }
        },
        /**
         * ajax请求数据
         * @param url
         * @param params
         * @param callback
         * @param error_callback
         * @param cache_key
         * @param cache_timeout: 缓存有效时长(秒)
         */
        ajax_data: function(url, params, callback, error_callback, cache_key, cache_timeout){
            let cache_type = '';
            if(/\/v1\/code\//.test(url)){
                cache_type = 'codes';
            }
            let cache = null;
            if(cache_type !== '' && url in this.caches[cache_type]){
                cache = this.caches[cache_type][url];
            } else if (cache_key !== undefined && cache_key in this.caches['data']){
                cache = this.caches['data'][cache_key];
            }
            if(cache !== null && cache['expired'] >= $utils.time_str_to_milliseconds()){
                callback(cache['data']);
            } else{
                this.ajax_post(url, params, function(result){
                    if($utils.get_str(result.code) !== '200' &&  $utils.get_str(result.code) !== '202'){
                        $plugins.notify('[%s]'.format(result.code), result.message, 'danger');
                    } else {
                        let expired = $utils.time_str_to_milliseconds() + ($utils.get_int(cache_timeout) || (60 * 60)) * 1000;
                        let cache = {'data': result, 'expired': expired};
                        if(cache_type){
                            $plugins.caches[cache_type][url] = cache;
                        } else if (cache_key){
                            $plugins.caches['data'][cache_key] = cache;
                        }
                        callback(result);
                    }
                }, error_callback);
            }
        },
        /**
         * 重置表单
         * @param form_id
         * @returns {boolean}
         */
        reset_form: function(form_id){
            let $form = $('#'+form_id);
            $form.find('input[type!="hidden"]').val('');
            $form.find('textarea').val('');
            $form.find('select').each(function(){
                $(this).val($(this).find('option:first').val());
            });
            let date = $utils.get_date_str();
            $form.find('.input-group[content="datetime"] input[name="time_min"]').val(date + ' 00:00:00');
            $form.find('.input-group[content="datetime"] input[name="time_max"]').val(date + ' 23:59:59');
            $form.find('.input-group[content="date"] input').val(date);
            return false;
        },
        /**
         * 获取并校验表单数据
         * @param form_id
         */
        form_values: function(form_id){
            let $form = $('#'+form_id);
            let params = {};
            let message = '';
            $form.find('input[name][type="hidden"]').each(function(){
                params[$(this).attr('name')] = $(this).val();
            });
            $form.find('input[name][type!="hidden"][type!="radio"][type!="checkbox"]').each(function(){
                if(message === ''){
                    if($utils.get_str($(this).attr('required')) === 'required' && $utils.get_str($(this).val()) === ''){
                        message = '%s不能为空'.format($(this).attr('placeholder'));
                        $(this).focus();
                    } else {
                        params[$(this).attr('name')] = $(this).val();
                    }
                }
            });
            if(message === ''){
                $form.find('input[name][type="radio"]').each(function(){
                    let name = $(this).attr('name');
                    params[name] = $form.find('input[name="%s"][type="radio"]:checked'.format(name)).val();
                });
            }
            if(message === ''){
                let checkbox_dict = {};
                $form.find('input[name][type="checkbox"]').each(function(){
                    let name = $(this).attr('name');
                    if(checkbox_dict[name] === undefined){
                        checkbox_dict[name] = {required: $(this).attr('required'), value: [], placeholder: $(this).attr('placeholder')};
                    }
                    if($(this).attr('checked') === 'checked'){
                        checkbox_dict[name]['value'].push($(this).val());
                    }
                });
                $.each(checkbox_dict, function(k, d){
                    if(message === ''){
                        if(d['required'] === 'required' && d['value'].length === 0){
                            message = '%s不能为空'.format(d['placeholder']);
                        } else {
                            params[k] = JSON.stringify(d['value']);
                        }
                    }
                });
            }
            if(message === ''){
                $form.find('select').each(function(){
                    if(message === ''){
                        if($utils.get_str($(this).attr('required')) === 'required' && $utils.get_str($(this).val()) === ''){
                            message = '%s不能为空'.format($(this).attr('placeholder'));
                        } else {
                            params[$(this).attr('name')] = $(this).val();
                        }
                    }
                });
            }
            if(message === ''){
                $form.find('textarea').each(function(){
                    if(message === ''){
                        if($utils.get_str($(this).attr('required')) === 'required' && $utils.get_str($(this).val()) === ''){
                            message = '%s不能为空'.format($(this).attr('placeholder'));
                            $(this).focus();
                        } else {
                            params[$(this).attr('name')] = $(this).val();
                        }
                    }
                });
            }
            if(message){
                $plugins.notify('', message, 'danger');
                return null;
            }
            return params;
        },
        /**
         * 初始化表格
         * @param table_id
         */
        init_data_table: function(table_id){
            let $table = $('#' + table_id);
            $table.find('tbody').html('<tr><td class="center" colspan="%s">点击查询获取数据</td></tr>'.format($table.find('thead tr:first th').length));
        },
        /**
         * 初始化表格
         * @param table_id
         * @param page_size
         */
        init_paging_table: function(table_id, page_size){
            this.init_data_table(table_id);
            this.show_paging_info(1, $utils.get_int(page_size, 15), 1, 0, 1);
        },
        /**
         * 表格数据加载
         * @param table_id
         * @param url
         * @param params
         * @param callback
         */
        data_table_loader: function(table_id, url, params, callback){
            let $table = $('#' + table_id);
            if($utils.get_str($table.attr('loading')) === 'loading'){
                return;
            }
            $table.attr('loading', 'loading');
            let $tbody = $table.find('tbody');
            $tbody.html('<tr><td class="center" colspan="%s"><i class="ace-icon fa fa-spinner fa-spin"></i></td></tr>'.format($table.find('thead tr:first th').length));
            this.ajax_data(url, params, function(result){
                $table.removeAttr('loading');
                callback($tbody, result);
            });
        },
        /**
         * 加载列表数据
         * @param table_id
         * @param url
         * @param params
         * @param callback
         */
        list_table_loader: function(table_id, url, params, callback){
            this.data_table_loader(table_id, url, params, function($tbody, result){
                let data = result.data || [];
                if(data.length === 0){
                    $tbody.find('td').html('暂无数据');
                } else {
                    $tbody.empty();
                }
                callback($tbody, data);
            });
        },
        /**
         * 获取分页查询参数
         * @param form_id
         * @param page_index
         * @param page_size
         * @returns {*}
         */
        paging_params: function(form_id, page_index, page_size){
            let $search = $('#'+form_id);
            let params;
            if (page_index === undefined || $utils.get_int(page_index) === 0) {
                params = $plugins.form_values(form_id);
                $search.data('params', params);
            } else {
                params = $search.data('params');
                if(params === null || params === undefined){
                    params = $plugins.form_values(form_id);
                    $search.data('params', params);
                }
            }
            if(params !== null){
                params['page_index'] = $utils.get_int(page_index, 1);
                params['page_size'] = $utils.get_int(page_size, 15);
            }
            return params;
        },
        /**
         * 加载分页数据
         * @param table_id 表格id
         * @param url 数据加载地址
         * @param params 参数
         * @param callback 列表显示函数
         */
        paging_table_loader: function(table_id, url, params, callback){
            this.data_table_loader(table_id, url, params, function($tbody, result){
                let data = result.data || {};
                let page_index = $utils.get_int(data['page_index']);
                let page_size = $utils.get_int(data['page_size']);
                let total_page = $utils.get_int(data['total_page']);
                let total_count = $utils.get_int(data['total_count']);
                let start = $utils.get_int(data['start']);
                if(total_count === 0){
                    $tbody.find('td').html('暂无数据');
                } else {
                    $tbody.empty();
                }
                $plugins.show_paging_info(page_index, page_size, total_page, total_count, start);
                callback($tbody, data['list'] || []);
            });
        },
        /**
         * 显示分页信息
         * @param page_index: 当前页数
         * @param page_size: 每页条数
         * @param total_page: 总页数
         * @param total_count: 总条数
         * @param start: 从第几条开始
         */
        get_paging_info: function(page_index, page_size, total_page, total_count, start){
            page_index = $utils.get_int(page_index) || 1;
            page_size = $utils.get_int(page_size);
            total_page = $utils.get_int(total_page) || 1;
            total_count = $utils.get_int(total_count);
            start = $utils.get_int(start);
            let paging_info = '从第 %s 条开始, 共 %s 条, 每页 %s 条, 当前第 %s 页, 共 %s 页'.format(start, total_count, page_size, page_index, total_page);
            let paging_list = '';
            if(page_index > 1){
                paging_list += '<li><a href="javascript: search(1)"><i class="ace-icon fa fa-angle-double-left"></i></a></li>';
                paging_list += '<li><a href="javascript: search(%s)"><i class="ace-icon fa fa-angle-left"></i></a></li>'.format(page_index-1);
            } else {
                paging_list += '<li class="disabled"><a href="javascript: void(0)"><i class="ace-icon fa fa-angle-double-left"></i></a></li>';
                paging_list += '<li class="disabled"><a href="javascript: void(0)"><i class="ace-icon fa fa-angle-left"></i></a></li>';
            }
            let count;
            if(page_index > 1){
                count = page_index-5 > 0 ? 5 : page_index-1;
                for(let i=0; i < count; i++){
                    paging_list += '<li><a href="javascript: search({0})">{0}</a></li>'.format(page_index-count+i);
                }
            }
            paging_list += '<li class="active disabled"><a href="javascript: void(0)" id="page-list-current-page" accesskey="{0}">{0}</a></li>'.format(page_index);
            if(page_index < total_page){
                count = page_index+5 > total_page ? total_page-page_index : 5;
                for(let i=1; i <= count; i++){
                    paging_list += '<li><a href="javascript: search({0})">{0}</a></li>'.format(page_index+i);
                }
            }
            if(page_index < total_page){
                paging_list += '<li><a href="javascript: search(%s)"><i class="ace-icon fa fa-angle-right"></i></a></li>'.format(page_index+1);
                paging_list += '<li><a href="javascript: search(%s)"><i class="ace-icon fa fa-angle-double-right"></i></a></li>'.format(total_page);
            } else {
                paging_list += '<li class="disabled"><a href="javascript: void(0)"><i class="ace-icon fa fa-angle-right"></i></a></li>';
                paging_list += '<li class="disabled"><a href="javascript: void(0)"><i class="ace-icon fa fa-angle-double-right"></i></a></li>';
            }
            return {'info': paging_info, 'list': paging_list};
        },
        /**
         * 当前页数
         */
        current_page_index: function(){
            return $utils.get_int($('#page-list-current-page').attr('accesskey')) || 1;
        },
        /**
         * 显示分页信息
         * @param page_index: 当前页数
         * @param page_size: 每页条数
         * @param total_page: 总页数
         * @param total_count: 总条数
         * @param start: 从第几条开始
         */
        show_paging_info: function(page_index, page_size, total_page, total_count, start){
            let paging = this.get_paging_info(page_index, page_size, total_page, total_count, start);
            $('#paging-info').html(paging['info']);
            $('#paging-list').html(paging['list']);
        },
        /**
         * 导出数据
         * @param url
         * @param params
         */
        export_data: function(url, params){
            let $form = $('#export-form');
            $form.empty();
            $form.attr('action', url);
            $.each(params, function(k, v){
                $form.append('<input type="hidden" name="%s" value="%s">'.format(k, v));
            });
            $form.submit();
        },
        /**
         * 初始化日期输入框
         */
        init_condition_date: function(date_min, date_max){
            $('.input-group[content="date"]').datetimepicker({
                format: 'YYYY-MM-DD',
                locale: moment.locale('zh-cn')
            });
            $('#condition-date-min').val($utils.get_date_str(date_min));
            $('#condition-date-max').val($utils.get_date_str(date_max));
        },
        /**
         * 初始化时间输入框
         */
        init_condition_datetime_range: function(date_min, date_max){
            $('.input-group[content="datetime"]').datetimepicker({
                format: 'YYYY-MM-DD HH:mm:ss',
                locale: moment.locale('zh-cn'),
            });
            $('#condition-time-min').val($utils.get_date_str(date_min) + ' 00:00:00');
            $('#condition-time-max').val($utils.get_date_str(date_max) + ' 23:59:59');
        },
        /**
         * 初始化查询条件-状态
         */
        init_condition_status: function(){
            $plugins.ajax_data('/v1/code/status', {}, function(result){
                let data = result.data;
                let status_dict = {};
                $.each(data, function(i, d){
                    $('#condition-status').append('<option value="%s">%s</option>'.format(d['code'], d['name']));
                    status_dict[$utils.get_str(d['code'])] = d['name'];
                });
                $('#data-table').data('status', status_dict);
            });
        },
        /**
         * 初始化查询条件-上游
         */
        init_condition_upstreams: function(){
            $plugins.ajax_data('/v1/channel/upstreams', {}, function (result) {
                let data = result.data || [];
                $.each(data, function (i, d) {
                    $('#condition-upstream').append('<option value="%s">%s</option>'.format(d['code'], d['name']));
                });
            }, null, 'channel-upstreams');
        },
        /**
         * 初始化查询条件-结算类型
         */
        init_condition_sett_type: function(){
            $plugins.ajax_data('/v1/code/sett_type', {}, function(result){
                let data = result.data;
                $.each(data, function(i, d){
                    $('#condition-sett-type').append('<option value="%s">%s</option>'.format(d['code'], d['name']));
                });
            });
        },
        /**
         * 初始化查询条件-交易类型
         */
        init_condition_trade_type: function(){
            $plugins.ajax_data('/v1/code/trade_type', {}, function(result){
                let data = result.data;
                let type_dict = {};
                $.each(data, function(i, d){
                    $('#condition-trade-type').append('<option value="%s">%s</option>'.format(d['code'], d['name']));
                    type_dict[$utils.get_str(d['code'])] = d['name'];
                });
                $('#data-table').data('trade_type', type_dict);
            });
        },
        /**
         * 初始化查询条件-交易方式
         */
        init_condition_trade_way: function(){
            $plugins.ajax_data('/v1/code/trade_way', {}, function(result){
                let data = result.data;
                let way_dict = {};
                $.each(data, function(i, d){
                    $('#condition-trade-way').append('<option value="%s">%s</option>'.format(d['code'], d['name']));
                    way_dict[$utils.get_str(d['code'])] = d['name'];
                });
                $('#data-table').data('trade_way', way_dict);
            });
        },
        loading(show) {
            if (show) {
                let html = `
                    <div class="modal fade" id="loadingModal">
                        <div style="width: 200px;height:20px; z-index: 20000; position: absolute; text-align: center; left: 50%; top: 50%;margin-left:-100px;margin-top:-10px">
                            <div class="progress progress-striped active" style="margin-bottom: 0;">
                                <div class="progress-bar" style="width: 100%;"></div>
                            </div>
                            <h5>Loading...</h5>
                        </div>
                    </div> 
                `;
                if ($("#loadingModal")) {
                    $("#loadingModal").remove();
                }

                $("body").append(html);

                $("#loadingModal").modal('show');
            } else {
                $("#loadingModal").modal('hide');
                $("#loadingModal").remove();
            }
        }
    }
}();
